{
  "hash": "75c24c3aedb4e93537558ca5a404aeb0",
  "result": {
    "markdown": "---\ntitle: \"Översätt provresultat från Excel till betyg i R\"\nauthor: \"Filip Wästberg\"\ndate: \"2020-04-19\"\ncategories: [excel]\n---\n\n\nJag har länge varit imponerad av David Stavegård och hans #torsdagstips i Excel där han med konkreta exempel visar hur man löser verkliga databearbetningsproblem med Excel.\n\nJag har tagit mig friheten att översatta några av dessa #torsdagstips till hur jag skulle lösa dem i programmeringsspråket R. \n\nI det här torsdagstipset har vi Excel-fil med provresultat från en klass och vi vill göra om resultaten till betyg. I Excel använder David funktionen ifs(). I R använder vi funktionen case_when() från paketet dplyr. \n\nVi laddar paketet `tidyverse` innehåller flera bra funktioner för vårt problem.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\nDet här problemet kanske låter banalt, men för mig var det här en av de svårare sakerna att göra när jag började programmera i R. Men så är det, det som känns enkelt idag var svårt igår.\n\nVi vet att provresultatet ska leda till följande betyg:\n\n- A >= 95\n- B >= 85\n- C >= 75\n- D >= 65\n- E >= 55\n- F > 54\n\nI mappen `data` har vi 24 olika klasser med provresultat.\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndata_filer <- paste0(\"data/\", list.files(\"data\"))\n\ndata_filer\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"data/klass_1.xlsx\"  \"data/klass_10.xlsx\" \"data/klass_11.xlsx\"\n [4] \"data/klass_12.xlsx\" \"data/klass_13.xlsx\" \"data/klass_14.xlsx\"\n [7] \"data/klass_15.xlsx\" \"data/klass_16.xlsx\" \"data/klass_17.xlsx\"\n[10] \"data/klass_18.xlsx\" \"data/klass_19.xlsx\" \"data/klass_2.xlsx\" \n[13] \"data/klass_20.xlsx\" \"data/klass_21.xlsx\" \"data/klass_22.xlsx\"\n[16] \"data/klass_23.xlsx\" \"data/klass_24.xlsx\" \"data/klass_3.xlsx\" \n[19] \"data/klass_4.xlsx\"  \"data/klass_5.xlsx\"  \"data/klass_6.xlsx\" \n[22] \"data/klass_7.xlsx\"  \"data/klass_8.xlsx\"  \"data/klass_9.xlsx\" \n```\n:::\n:::\n\n\n\nVi kan läsa in en klass med `read_excel()`:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(readxl)\n\nklass_1 <- read_excel(\"data/klass_1.xlsx\")\n```\n:::\n\n\nFör att skriva flera \"if-else\" kan vi använda funktionen `case_when()` i `mutate()`, båda från paketet `dplyr` som laddats i `tidyverse`.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nklass_1 <- klass_1 %>% \n  mutate(betyg = case_when(\n    provresultat >= 95 ~ \"A\",\n    provresultat >= 85 ~ \"B\",\n    provresultat >= 75 ~ \"C\",\n    provresultat >= 65 ~ \"D\",\n    provresultat >= 55 ~ \"E\",\n    provresultat < 55 ~ \"F\",\n  ))\n\nklass_1\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 3\n   namn      provresultat betyg\n   <chr>            <dbl> <chr>\n 1 Nanay               95 A    \n 2 Manoshak            79 C    \n 3 Albano              58 E    \n 4 Minotti             61 E    \n 5 Dahlith             73 D    \n 6 Lillebror           80 C    \n 7 Maasum              74 D    \n 8 Winner              71 D    \n 9 Lilleby             91 B    \n10 Ratu                58 E    \n# … with 20 more rows\n```\n:::\n:::\n\n\nVi kan sedan skriva resultatet till mappen `provresultat` om vi vill ha slutresultatet i Excel.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\n\nwrite.xlsx(klass_1, \"provresultat/resultat-klass-1.xlsx\")\n```\n:::\n\n\n## Varför göra det här i R?\n\nGenom att skriva det här som ett skript kan du enkelt byta ut din datafil och kör om resultatet och på så sätt spara tid.\n\nEtt ännu mer effektivt sätt är att iterera över alla klasser, översätta deras resultat till betyg och sedan skriva allt till en Excel, med en flik för varje klass.\n\nVi börjar meda att skriva en egen funktion:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(stringr)\n\nread_klass <- function(path){\n  data <- read_excel(path)\n  \n  data$klass <- str_extract(path, \"klass_[:digit:]+\")\n  \n  data\n}\n\nread_klass(\"data/klass_4.xlsx\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 30 × 3\n   namn        provresultat klass  \n   <chr>              <dbl> <chr>  \n 1 Mahsuni               41 klass_4\n 2 Aldiona               57 klass_4\n 3 Mervis                49 klass_4\n 4 Niangi                42 klass_4\n 5 Laxmi                 48 klass_4\n 6 Helgevold             44 klass_4\n 7 Yayah                100 klass_4\n 8 Irgens                93 klass_4\n 9 Frans-Lukas           82 klass_4\n10 Stålis                57 klass_4\n# … with 20 more rows\n```\n:::\n:::\n\n\nVi kan iterera den här funktionen över alla klasser och läsa in allt till en data.frame med `map_df()` från paketet `purrr` (också från `tidyverse`).\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(purrr)\n\nklasser <- map_df(data_filer, read_klass)\n\nklasser\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 720 × 3\n   namn      provresultat klass  \n   <chr>            <dbl> <chr>  \n 1 Nanay               95 klass_1\n 2 Manoshak            79 klass_1\n 3 Albano              58 klass_1\n 4 Minotti             61 klass_1\n 5 Dahlith             73 klass_1\n 6 Lillebror           80 klass_1\n 7 Maasum              74 klass_1\n 8 Winner              71 klass_1\n 9 Lilleby             91 klass_1\n10 Ratu                58 klass_1\n# … with 710 more rows\n```\n:::\n:::\n\n\nVi kan enkelt applicera vår betygomräknare till alla klasser:\n\n\n::: {.cell}\n\n```{.r .cell-code}\nklasser <- klasser %>% \n  mutate(betyg = case_when(\n    provresultat >= 95 ~ \"A\",\n    provresultat >= 85 ~ \"B\",\n    provresultat >= 75 ~ \"C\",\n    provresultat >= 65 ~ \"D\",\n    provresultat >= 55 ~ \"E\",\n    provresultat < 55 ~ \"F\",\n  ))\n\nklasser\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 720 × 4\n   namn      provresultat klass   betyg\n   <chr>            <dbl> <chr>   <chr>\n 1 Nanay               95 klass_1 A    \n 2 Manoshak            79 klass_1 C    \n 3 Albano              58 klass_1 E    \n 4 Minotti             61 klass_1 E    \n 5 Dahlith             73 klass_1 D    \n 6 Lillebror           80 klass_1 C    \n 7 Maasum              74 klass_1 D    \n 8 Winner              71 klass_1 D    \n 9 Lilleby             91 klass_1 B    \n10 Ratu                58 klass_1 E    \n# … with 710 more rows\n```\n:::\n:::\n\n\nNu kan vi spara ner alla betyg till en Excel där varje klass får en egen flik.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\n\nwb <- createWorkbook()\n\nklass_till_excel <- function(klass){\n  klass_df <- filter(klasser, klass == !!klass)\n  \n  addWorksheet(wb, sheetName = klass)\n  \n  writeData(wb, sheet = klass, klass_df)\n  \n}\n\nunika_klasser <- unique(klasser$klass)\n\nklasser_wb <- map(unika_klasser, klass_till_excel)\n\nsaveWorkbook(wb, \"provresultat/klasser-provresutlat.xlsx\", overwrite = TRUE)\n```\n:::\n\n\n![](excel-screenshot.png)\n\nSå enkelt och effektivt!\n\n## Appendix: Skapa klasserna\n\nVi kan börja med att generera en slumpmässig fil med provresultat. Tack vara Peter Dahlgren på Stockholm universitet, som lagt upp en fil med svenska namn, kan vi generera 30 svenska kill- och tjejnamn utan att först behöva skriva dem.\n\nJag har skapat en enkel funktion för det här som heter `skapa_klass()` som skapar ett fiktivt dataset med provresultat för $n$ antal elever. Är du nyfiken kan du läsa den nedan, annars är det bara att hoppa över.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nskapa_klass <- function(antal_elever = 30){\n  män <- read_csv(\"https://raw.githubusercontent.com/peterdalle/svensktext/master/namn/fornamn-man.csv\",\n                  col_names = FALSE, locale = locale(encoding = \"UTF-8\"))\n  kvinnor <- read_csv(\"https://raw.githubusercontent.com/peterdalle/svensktext/master/namn/fornamn-kvinnor.csv\",\n                      col_names = FALSE, locale = locale(encoding = \"UTF-8\"))\n  \n  alla_namn <- bind_rows(män, kvinnor) %>% \n    rename(namn = X1)\n  \n  klass <- tibble(\n    namn = sample(alla_namn$namn, 30, replace = TRUE),\n    provresultat = sample(c(40:100), 30, replace = TRUE))\n  \n  klass\n}\n```\n:::\n\n\nNedan skapar vi enkelt klasserna.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(openxlsx)\nskriv_klass <- function(nr){\n  klass <- skapa_klass(30)\n  \n  klass_file <- paste0(\"data/klass\", \"_\", nr, \".xlsx\")\n  \n  write.xlsx(klass, klass_file)\n}\n\nmap(1:24, skriv_klass)\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}